/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not

CHIP ALU-nostat{
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
    PARTS:
    //zx
    Mux16(a=x, b=false, sel=zx, out=zxResult);

    //nx
    Not16(in=zxResult, out=inverseX);
    Mux16(a=zxResult, b=inverseX, sel=nx, out=nxResult);

    //zy
    Mux16(a=y, b=false, sel=zy, out=zyResult);

    //ny
    Not16(in=zyResult, out=inverseY);
    Mux16(a=zyResult, b=inverseY, sel=ny, out=nyResult);

    //f
    Add16(a=nxResult, b=nyResult, out=Addxy);
    And16(a=nxResult, b=nyResult, out=Andxy);
    Mux16(a=Andxy, b=Addxy, out=fResult);

    //no
    Not16(in=fResult, out=inverseFResult);
    Mux16(a=fResult, b=inverseFResult, sel=no, out=out);

}